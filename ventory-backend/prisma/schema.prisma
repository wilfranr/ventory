// Genera el cliente de Prisma para acceder a la base de datos
generator client {
  provider = "prisma-client-js"
}

// Fuente de datos principal. En este caso se utiliza SQLite y la URL se
// define mediante la variable de entorno DATABASE_URL
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Usuarios del sistema
model User {
  id            String   @id @default(cuid()) // identificador único
  name          String   // nombre del usuario
  email         String   @unique // correo electrónico
  password      String   // contraseña encriptada
  roleId        String?  // referencia opcional al rol
  role          Role?    @relation("RoleToUsers", fields: [roleId], references: [id]) // relación con Role
  companyId     String   // empresa a la que pertenece
  company       Company  @relation(fields: [companyId], references: [id]) // relación con Company
  status        String   @default("activo") // estado del usuario
  refreshToken  String?  @unique // token para refrescar sesión
  createdAt     DateTime @default(now()) // fecha de creación
  updatedAt     DateTime @updatedAt // fecha de actualización
}

// Empresas registradas
model Company {
  id                 String              @id @default(cuid()) // identificador único
  name               String              // nombre de la empresa
  slug               String              @unique // slug para URLs
  nit                String              @unique // número de identificación tributaria
  address            String?             // dirección física
  phones             String?             // teléfonos de contacto
  email              String?             // correo de contacto
  website            String?             // sitio web
  logo               String?             // URL del logo

  currency           String?             // moneda predeterminada, ej: 'COP'
  vatPercent         Float?              // porcentaje de IVA estándar

  country            String?             // País de la empresa
  department         String?             // Departamento/Estado de la empresa
  city               String?             // Ciudad de la empresa

  // 🎨 Configuración de estilos de la empresa
  themePreset        String?             // preset del tema (Aura, Lara, Nora)
  themePrimary       String?             // color primario del tema
  themeSurface       String?             // color de superficie del tema
  menuMode           String?             // modo del menú (static, overlay)

  users              User[]              // usuarios asociados
  roles              Role[]              // roles asociados a esta empresa
  registrationTokens RegistrationToken[] // tokens de registro de usuarios
  listItems          ListItem[]          // relación con ListItem
  listTypes          ListType[]          // relación con ListType
  thirdParties       ThirdParty[]        // terceros asociados a esta empresa
  clients            Client[]            // clientes asociados a esta empresa
  providers          Provider[]          // proveedores asociados a esta empresa
  createdAt          DateTime            @default(now()) // fecha de creación
}

// Tokens de registro utilizados para invitar a nuevos usuarios
model RegistrationToken {
  id        String   @id @default(cuid()) // identificador único
  token     String   @unique // token único de invitación
  role      String   // rol que se asignará al usuario
  companyId String   // empresa a la que pertenece
  company   Company  @relation(fields: [companyId], references: [id]) // relación con Company
  createdAt DateTime @default(now()) // fecha de creación
}

// Roles disponibles dentro de la aplicación
model Role {
  id          String       @id @default(cuid()) // identificador único
  name        String       // nombre del rol
  companyId   String       // empresa a la que pertenece
  company     Company      @relation(fields: [companyId], references: [id]) // relación con Company
  users       User[]       @relation("RoleToUsers") // usuarios que poseen este rol
  permissions Permission[] @relation("RoleToPermissions") // permisos asociados
  createdAt   DateTime     @default(now()) // fecha de creación
  updatedAt   DateTime     @updatedAt // fecha de actualización

  @@unique([name, companyId]) // El nombre del rol debe ser único por empresa
}

// Permisos que pueden asociarse a los roles
model Permission {
  id        String   @id @default(cuid()) // identificador único
  name      String   @unique // nombre del permiso
  roles     Role[]   @relation("RoleToPermissions") // permisos asociados
  createdAt DateTime @default(now()) // fecha de creación
  updatedAt DateTime @updatedAt // fecha de actualización
}

// Elementos de las listas personalizadas
model ListItem {
  id          String   @id @default(cuid()) // identificador único
  listTypeId  String   // referencia al tipo de lista
  listType    ListType @relation(fields: [listTypeId], references: [id]) // relación con ListType
  name        String   // nombre del elemento
  description String?  // descripción opcional
  companyId   String   // empresa a la que pertenece
  company     Company  @relation(fields: [companyId], references: [id]) // relación con Company
  active      Boolean  @default(true) // indica si está activo
  createdAt   DateTime @default(now()) // fecha de creación
  updatedAt   DateTime @updatedAt // fecha de actualización

  @@index([listTypeId])
  @@index([companyId])
}

// Tipos de listas personalizables por cada compañía
model ListType {
  id          String     @id @default(cuid()) // identificador único
  code        String?    // código opcional
  name        String     // nombre del tipo de lista
  description String?    // descripción opcional
  items       ListItem[] // elementos pertenecientes a este tipo
  companyId   String     // empresa propietaria
  company     Company    @relation(fields: [companyId], references: [id]) // relación con Company
  createdAt   DateTime   @default(now()) // fecha de creación
  updatedAt   DateTime   @updatedAt // fecha de actualización

  @@index([companyId])
}

// Modelo central con datos compartidos
model ThirdParty {
  id        String   @id @default(cuid())
  name      String
  nit       String   // Documento de identificación
  address   String?
  phones    String?
  email     String?  @unique
  website   String?

  // Relación con la empresa (Multi-tenant)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relaciones de Rol (Opcionales, One-to-One)
  client   Client?
  provider Provider?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nit, companyId]) // El NIT debe ser único por empresa
  @@map("third_parties")
}

// Rol: Cliente
model Client {
  id           String    @id @default(cuid())
  creditLimit  Float     @default(0)
  // Campos futuros: contactPerson, salesAgentId, etc.

  // Relación One-to-One con ThirdParty
  thirdPartyId String      @unique
  thirdParty   ThirdParty  @relation(fields: [thirdPartyId], references: [id], onDelete: Cascade)

  // Redundancia controlada para queries directas
  companyId    String
  company      Company     @relation(fields: [companyId], references: [id], onDelete: NoAction)

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Rol: Proveedor
model Provider {
  id             String    @id @default(cuid())
  paymentTerms   String?   // Ej: "Net 30", "Net 60"
  bankAccount    String?
  // Campos futuros: contactPerson, rating, etc.

  // Relación One-to-One con ThirdParty
  thirdPartyId   String      @unique
  thirdParty     ThirdParty  @relation(fields: [thirdPartyId], references: [id], onDelete: Cascade)
  
  // Redundancia controlada para queries directas
  companyId      String
  company        Company     @relation(fields: [companyId], references: [id], onDelete: NoAction)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}